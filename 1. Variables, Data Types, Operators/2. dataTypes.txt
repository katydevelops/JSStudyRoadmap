Introduction to Data Types

In JavaScript, there are seven primitive data types and one complex data type (Object). TypeScript extends these with additional types.

    Primitive:
        1. String
        2. Number
        3. Boolean
            - 0 will cast to false
            - 1 will cast to true
        4. Undefined
            - Represents an uninitialized or non-existent value
        5. Null
            - Represents an intentionally empty or non-existent value
        6. Symbol
            - Represents a unique identifier
            - Introduced in ECMAScript 2015 (ES6)
        7. BigInt
            - Represents an integer with arbitrary precision
            - Introduced in ECMAScript 2020 (ES11)

Complex Data Types
    Object
        - Represent a collection of key-value pairs
        - Keys are strings or symbols, values can be any data type

        Object methods:
            - Object.keys(): returns an array of keys
            - Object.values(): returns an array of values
            - Object.entries(): returns an array of key-value pairs


    let person = {
    name: 'Katy',
    age: 33
    occupation: 'Software Engineer'
    };
    console.log(person.name); // Output: Katy

    Array
        - An array is a special type of object in JavaScript
        - Represent an ordered collection of values
        - Values can be of any data type

Data Structures in TypeScript
    Tuple
        - Typed array with a pre-defined length and types for each index
        - Represent an ordered collection of values with a fixed length
        - Values can be any data type
        - A good practice is making a tuple readonly in order to prevent a loss of type safety with newly added items; this makes tuple immutable
        - Tuples are a very effective choice when a function needs to return multiple values of different types
            - Tuples are ideal for representing fixed-sized data structures, i.e. RBG color or coordinates
            - Tuples can also be passed as parameters to functions, ensuring the function receives a fixed number of arguments of specific types
            - TypeScript 3.0 now allows optional elements for tuples 
        - INTERESTING FACT: In React, the UseState hook returns a tuple of the value and a setter function

    let exampleTuple: readonly [number, boolean, string];

    exampleTuple = [7, true, 'Katy says hi!'];
    
    Since tuples are arrays - they can also be destructured 

    const graph: [number, number] = [55, 77];
    const [x, y] = graph; // Console.logging graph will 

    Enum
        - Enums in TypeScript are a way to define a set of named values that have underlying numeric or string values
        - Enums are useful when you need to define a set of distinct values that have a particular meaning in your code
        - Enums can be either numeric or string values - if you don't specify a value, the enum will be assigned a numeric value starting from 0
        - Enums are best when you want to to restrict the values that can be assigned to a variable or property or have code that is self-documenting (makeing it clear what values are allowed)
        - Example use cases are Status Codes, Error Codes and Configuration Options

        enum Status {
            Pending = 1,
            InProgress = 2,
            Completed = 3
        }



